from math import sqrt, ceil

#globals
ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

#helpers
def has_numbers(text):
    for c in text:
        if c.isdigit():
            return True
    return False

# === SUBSTITUTION CIPHERS === 
def encode_polybius(text):
    #encodes text with polybius square using the modern latin alphabet

    if has_numbers(text):
        raise ValueError("text should not have digit characters")

    text = text.upper()
    square = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    r = ""
    for c in text:
        if c in square:
            i = square.index(c)
            r += str(i//5 + 1) + str(i % 5 + 1)
        elif c == "J":
            r += "24"
        else:
            r += c
    return r

def decode_polybius(text):
    square = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    r = ""
    n = 0
    while n < len(text):
        if text[n].isnumeric():
            i, j = text[n: n+2]
            r += square[(int(i) - 1)*5 + int(j) - 1]
            n += 2
        else:
            r += text[n]
            n += 1
    if "I" in r:
        print("\'J \'may have been overwritten by \'I\', have a closer look human!\n" + r)
    return r

def encode_caesar(key, message):
    key = key % 26
    r = ""
    for c in message:
        if c.upper() in ALPHABET:
            i = (ALPHABET.index(c.upper()) + key) % 26
            if c.isupper():
                r += ALPHABET[i]
            else:
                r += ALPHABET[i].lower()
        else:
            r += c
    return r
    
def decode_caesar(key, message):
    return encode_caesar(-key, message)


def encode_ragbaby(text, key, enc = 1):
    #Similar to ceasar.  key is added to the start of the alphabet, and all non-unique letters are removed.  if "key" is our key, then our 26 char key will be:
    #"KEYABCDFGHIJLMNOPQRSTUVWXZ"
    #each letter is then replaced with a letter in that key, offset by its position in its own word
    
    #clean key
    key = list(key)
    _list = []
    for c in key:
        if c not in _list:
            _list += c
    key = "".join(_list).upper()
    
    #set alp
    alp = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    alp = "".join([c for c in alp if c not in key])
    alp = key + alp
    
    r = ""
    j = 1
    for c in text:
        if c.upper() in alp:
            i = (alp.index(c.upper()) + (j * enc)) % 26
            if c.isupper():
                r += alp[i]
            else:
                r += alp[i].lower()
            j += 1
        else:
            r += c
            j = 1

    return r

def decode_ragbaby(text, key):
    return encode_ragbaby(text, key, -1)


# === TRANSPOSITION CIPHERS ===

def column_transpose(string):
    # Transposes string by the square root of its length (will rjust string so its length is a perfect square as needed)
    side_l = ceil(sqrt(len(string)))
    string = string.ljust(side_l ** 2)
    r = ''
    for i in range(side_l):
        for j in range(side_l):
            r += (string[j * side_l + i])
    return r
    
def encode_IRC(n, string):
    #Shifts all nonspace charaacters right by n
    #Then for each word (delimited by space) shift to right by n
    #repeat n times
    #add n to start of string

    space_ins = []
    i = 0
    while string.find(" ", i + 1) != -1:
        i = string.find(" ", i + 1)
        space_ins.append(i)

    for _ in range(n):
        string = string.replace(" ", "")
        string = string[-n:] + string[:-n]
        string = list(string)
        for i in space_ins:
            string.insert(i, " ")
        string = "".join(string).split(" ")
        for i, word in enumerate(string):
            if len(word) != 0:
                sn = n % len(word)
                string[i] = word[-sn:] + word[:-sn]
        string = " ".join(string)

    return str(n) + " " + string


def decode_IRC(string):
    n = int(string[:string.index(" ")])
    string = string[string.index(" ") + 1:]

    i = 0
    space_ins = []
    while string.find(" ", i + 1) != -1:
        i = string.find(" ", i + 1)
        space_ins.append(i)

    for _ in range(n):
        string = string.split(" ")
        for i, word in enumerate(string):
            if len(word) != 0:
                sn = n % len(word)
                string[i] = word[sn:] + word[:sn]
        string = " ".join(string)

        string = string.replace(" ", "")
        string = string[n:] + string[:n]
        string = list(string)
        for i in space_ins:
            string.insert(i, " ")
        string = ''.join(string)

    return string

